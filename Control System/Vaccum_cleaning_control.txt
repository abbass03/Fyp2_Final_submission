import cv2
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import numpy as np
import lgpio
import time

# Define the GPIO pin connected to the vacuum's relay
VACUUM_PIN = 17

# Open the GPIO chip
h = lgpio.gpiochip_open(0)

# Set the pin as output (active-high relay)
lgpio.gpio_claim_output(h, VACUUM_PIN)

# Load the ResNet18 model structure
model = models.resnet18(weights=None)
model.fc = nn.Linear(model.fc.in_features, 2)  # Adjust output layer for 2 classes: dust / no dust

# Load the trained weights (make sure this path is correct on your Raspberry Pi)
model.load_state_dict(torch.load(
    "/home/ubuntu/model_weights.pth", map_location='cpu'
))
model.eval()  # Set model to evaluation mode

# Define preprocessing pipeline for input frames
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),                         # Resize frame to 224x224
    transforms.ToTensor(),                                # Convert to tensor
    transforms.Normalize([0.485, 0.456, 0.406],            # Normalize using ImageNet means
                         [0.229, 0.224, 0.225])            # and standard deviations
])

# Initialize camera (webcam)
cap = cv2.VideoCapture(0)

# Continuous loop for real-time inference
while True:
    ret, frame = cap.read()  # Capture a frame
    if not ret:
        continue

    # Convert frame to PIL format and preprocess
    image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    input_tensor = preprocess(image).unsqueeze(0)  # Add batch dimension

    # Inference: predict if dust is present
    with torch.no_grad():
        output = model(input_tensor)
        _, predicted = torch.max(output, 1)  # Get class with highest probability

        # If dust is detected (class 1), turn ON vacuum
        if predicted.item() == 1:
            lgpio.gpio_write(h, VACUUM_PIN, 1)
            print("Dust detected: Vacuum ON")
        else:
            lgpio.gpio_write(h, VACUUM_PIN, 0)
            print("No dust: Vacuum OFF")

    time.sleep(1)  # Wait 1 second before next frame

# Release camera and GPIO resources
cap.release()
lgpio.gpiochip_close(h)
